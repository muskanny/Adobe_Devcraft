# -*- coding: utf-8 -*-
"""Adobe_DevCraft.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6Q_rXGtNmsPL29NFUc34sEU2Uth6qTc
"""

import os
import pandas as pd
import numpy as np

# Define file paths
data_dir = "dataset\\dataset"
bid_files = [f for f in os.listdir(data_dir) if f.startswith("bid")]
impression_files = [f for f in os.listdir(data_dir) if f.startswith("imp")]
click_files = [f for f in os.listdir(data_dir) if f.startswith("clk")]
conversion_files = [f for f in os.listdir(data_dir) if f.startswith("conv")]

print("Found files:")
print("Bids:", bid_files)
print("Impressions:", impression_files)
print("Clicks:", click_files)
print("Conversions:", conversion_files)

# Advertiser-specific N values
advertiser_N = {1458: 0, 3358: 2, 3386: 0, 3427: 0, 3476: 10}

# Define column names
columns = ["BidID", "Timestamp", "Logtype", "VisitorID", "User-Agent", "IP", "Region", "City",
           "Adexchange", "Domain", "URL", "AnonymousURLID", "AdslotID", "Adslotwidth", "Adslotheight",
           "Adslotvisibility", "Adslotformat", "Adslotfloorprice", "CreativeID", "Biddingprice", "Payingprice",
           "KeypageURL", "AdvertiserID", "Targetting_Categories"]

columnsbid=["BidID", "Timestamp", "VisitorID", "User-Agent", "IP", "Region", "City", "Adexchange" , "Domain", "URL", "AnonymousURLID", "AdslotID", "Adslotwidth", "Adslotheight","Adslotvisibility", "Adslotformat", "Adslotfloorprice", "CreativeID", "Biddingprice",  "Payingprice", "AdvertiserID", "Logtype", "KeypageURL",  "Targetting_Categories"]

def load_log_files(file_list, log_type, has_payingprice=False):
    """Loads log files efficiently with reduced memory usage."""
    data = []
    for file in file_list:
        file_path = os.path.join(data_dir, file)
        print(f"Loading {log_type} file: {file}")

        df = pd.read_csv(file_path, delimiter='\t', header=None, dtype=str)

        if has_payingprice:
            df.columns = columns
        else:
            df.columns = [col for col in columns if col not in ['Payingprice', 'KeypageURL', 'Targetting_Categories']]
            df['Payingprice'] = np.nan
            df['KeypageURL'] = np.nan

        # df['LogType'] = log_type
        data.append(df)

    return pd.concat(data, ignore_index=True) if data else pd.DataFrame(columns=columns + ['LogType'])
def load_log_files_bid(file_list, log_type, has_payingprice=False):
    """Loads log files efficiently with reduced memory usage."""
    data = []
    for file in file_list:
        file_path = os.path.join(data_dir, file)
        print(f"Loading {log_type} file: {file}")

        df = pd.read_csv(file_path, delimiter='\t', header=None, dtype=str)

        if has_payingprice:
            df.columns = columnsbid
        else:
            df.columns = [col for col in columnsbid if col not in ['Payingprice', 'KeypageURL', 'Targetting_Categories']]
            df['Payingprice'] = np.nan
            df['KeypageURL'] = np.nan

        #df['LogType'] = log_type
        data.append(df)

    return pd.concat(data, ignore_index=True) if data else pd.DataFrame(columns=columns + ['LogType'])

# Load datasets

impressions = load_log_files(impression_files, log_type='impression', has_payingprice=True)
clicks = load_log_files(click_files, log_type='click', has_payingprice=True)
conversions = load_log_files(conversion_files, log_type='conversion', has_payingprice=True)





bids = load_log_files_bid(bid_files, log_type='bid', has_payingprice=False)



# impressions['Adexchange'].unique()

# bids.shape

# bids.columns

# impressions['Logtype'].unique()

# bids['City'].unique()

# impressions.info()

# bids.info()

# bids['AdvertiserID'].unique()

# bids.columns





# bids.shape



# Convert AdvertiserID to numeric type
# bids['AdvertiserID'] = pd.to_numeric(bids['AdvertiserID'], errors='coerce').astype('Int32')

# Convert necessary columns to numeric while keeping BidID as string
for df_name, df in zip(["Bids", "Impressions", "Clicks", "Conversions"], [bids, impressions, clicks, conversions]):
    for col in ['Biddingprice', 'Payingprice',  'Adslotfloorprice']:
        df[col] = pd.to_numeric(df[col], errors='coerce').astype('float32')
    print(f"Converted numeric columns for {df_name}")
# Debugging: Print first few rows
print("Sample Bids Data:")
print(bids.head(3))
print("Sample Impressions Data:")
print(impressions.head(3))

impressions.dropna(subset=['BidID'], inplace=True)
clicks.dropna(subset=['BidID'], inplace=True)
conversions.dropna(subset=['BidID'], inplace=True)

# l1= clicks['BidID'].unique
# l2= bids['BidID'].unique
# l3= conversions['BidID'].unique
# l4= impressions['BidID'].unique



# bids['Logtype'].unique()



# print(bids['Timestamp'].min(), bids['Timestamp'].max())
# print(impressions['Timestamp'].min(), impressions['Timestamp'].max())
# print(clicks['Timestamp'].min(), clicks['Timestamp'].max())
# print(conversions['Timestamp'].min(), conversions['Timestamp'].max())

# common_bids = clicks['BidID'].isin(bids['BidID'])
# print(common_bids.sum())  # How many BidIDs match?

# common_conversions = conversions['BidID'].isin(bids['BidID'])
# print(common_conversions.sum())  # How many conversions match?

# bids.columns = bids.columns.str.strip()
# clicks.columns = clicks.columns.str.strip()

# bids.columns

# print("Missing values in AdslotID (bids):", bids['AdslotID'].isna().sum())
# print("Missing values in AdslotID (clicks):", clicks['AdslotID'].isna().sum())





# Add 'Impression', 'Click', 'Conversion' columns to bids


bids['Impression'] = bids['BidID'].isin(impressions['BidID']).astype(int)
bids['Click'] = bids['BidID'].isin(clicks['BidID']).astype(int)
bids['Conversion'] = bids['BidID'].isin(conversions['BidID']).astype(int)

print("Sample Bids Data:")
print(bids[['BidID', 'Biddingprice', 'Payingprice','Impression',  'Click', 'Conversion', 'AdvertiserID']].head(5))

common_visitors = clicks['VisitorID'].isin(bids['VisitorID'])
print(common_visitors.sum())

# Compute scores and optimize budget allocation
def optimize_bidding(bids):
    if bids.empty or 'AdvertiserID' not in bids.columns:
        print("No valid bids data available.")
        return {}, {}

    # Ensure Payingprice is properly handled
    bids['EffectivePrice'] = bids['Payingprice'].fillna(bids['Biddingprice'])

    # Remove NaN AdvertiserIDs
    #bids.dropna(subset=['AdvertiserID'], inplace=True)

    # Convert to integer type
    #bids['AdvertiserID'] = bids['AdvertiserID'].astype('int32')

    # Compute total spending per advertiser
    advertiser_budgets = bids.groupby('AdvertiserID')['EffectivePrice'].sum().to_dict()

    # Compute scores
    bids['Score'] = bids['Click'].astype(int) + bids['Conversion'].astype(int) * bids['AdvertiserID'].map(advertiser_N).fillna(1)

    # Sum scores per advertiser
    advertiser_scores = bids.groupby('AdvertiserID')['Score'].sum().to_dict()

    return advertiser_scores, advertiser_budgets

# Run optimization
scores, advertiser_budgets = optimize_bidding(bids)

print("Advertiser Performance:")
for adv, score in scores.items():
    print(f"Advertiser {adv}: Score {score}, Budget Spent {advertiser_budgets[adv]}")



# arr=bids["BidID"].unique()
# arr1=clicks["BidID"].unique()
# arr2=conversions["BidID"].unique()
# arr3=impressions["BidID"].unique()

# for i in arr:
#   if i in arr3:
#     print(i)

